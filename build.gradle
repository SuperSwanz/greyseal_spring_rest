buildscript {
    ext {
        apacheCommonsLang = '3.8.1'
        gsonVersion = '2.8.5'
        mapstructVersion = '1.3.0.Final'
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
    id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.app.rest'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    jcenter()
}

sourceCompatibility = JavaVersion.VERSION_1_8

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-aop",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.boot:spring-boot-starter-data-rest",
            "org.springframework.boot:spring-boot-starter-web",
            "org.apache.commons:commons-lang3:${apacheCommonsLang}",
            "com.google.code.gson:gson:${gsonVersion}",
            "org.mapstruct:mapstruct-jdk8:${mapstructVersion}",
            "org.mapstruct:mapstruct-processor:${mapstructVersion}"


    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor "org.projectlombok:lombok",
            "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/app/rest/greyseal/GreysealApplication.class', 'com/app/rest/greyseal/mapper/*.class'])
        })
    }
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestCoverageVerification {
    violationRules {

//      rule {
//          element = 'METHOD'
//          limit {
//              counter = 'LINE'
//              value = 'COVEREDRATIO'
//              minimum = 1.0
//          }
//          excludes = [
//                  'com.app.rest.greyseal.mapper.UserMapperImpl.toUser(java.lang.Object)',
//          ]
//      }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [
                    'com.app.rest.greyseal.mapper.*',
                    'com.app.rest.greyseal.GreysealApplication',
                    'com.app.rest.greyseal.dto.UserDTO',
                    'com.app.rest.greyseal.model.Base'
            ]
        }
        rule {
            element = 'CLASS'
            includes = [
                    'com.app.rest.greyseal.dto.UserDTO',
                    'com.app.rest.greyseal.model.Base'
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }

}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

//test {
//    useJUnitPlatform()
//}